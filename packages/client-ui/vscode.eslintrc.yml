root: true
env:
  es6: true
  browser: true
parserOptions:
  sourceType: module
plugins:
  - promise
  - eslint-comments
  - react
  - react-hooks
extends:
  - eslint:recommended
  - plugin:promise/recommended
settings:
  react:
    version: detect
overrides:
  - files: ['*.config.js', '*.precss.js']
    env:
      browser: false
      node: true
  - files: ['*.js']
    parser: '@babel/eslint-parser'
    parserOptions:
      babelOptions:
        configFile: ./babel-dev.config.js
  - files: ['*.ts', '*.tsx']
    extends:
      - plugin:@typescript-eslint/recommended
      - plugin:@typescript-eslint/recommended-requiring-type-checking
    parser: '@typescript-eslint/parser'
    parserOptions:
      project:
        - ../front/tsconfig.json
        - ./tsconfig.json
    plugins: ['@typescript-eslint/eslint-plugin']
    rules:
      '@typescript-eslint/no-unused-vars':
        - error
        - argsIgnorePattern: '^_'
      no-unused-vars: 'off'
rules:
  # General
  comma-dangle: [warn, 'always-multiline'] # allow or disallow trailing commas
  no-cond-assign: warn # disallow assignment in conditional expressions
  no-console: 'off' # disallow use of console (off by default in the node environment)
  no-const-assign: error # disallow assignment to const-declared variables
  no-constant-condition: 'off' # disallow use of constant expressions in conditions
  no-control-regex: warn # disallow control characters in regular expressions
  no-debugger: warn # disallow use of debugger
  no-dupe-class-members: error # Disallow duplicate name in class members
  no-dupe-keys: error # disallow duplicate keys when creating object literals
  no-empty: 'off' # disallow empty statements
  no-ex-assign: warn # disallow assigning to the exception in a catch block
  no-extra-boolean-cast: warn # disallow double-negation boolean casts in a boolean context
  no-extra-parens: 'off' # disallow unnecessary parentheses (off by default)
  no-extra-semi: warn # disallow unnecessary semicolons
  no-func-assign: warn # disallow overwriting functions written as function declarations
  no-inner-declarations: 'off' # disallow function or variable declarations in nested blocks
  no-invalid-regexp: warn # disallow invalid regular expression strings in the RegExp constructor
  no-negated-in-lhs: warn # disallow negation of the left operand of an in expression
  no-obj-calls: warn # disallow the use of object properties of the global object (Math and JSON) as functions
  no-regex-spaces: warn # disallow multiple spaces in a regular expression literal
  no-reserved-keys: 'off' # disallow reserved words being used as object literal keys (off by default)
  no-sparse-arrays: warn # disallow sparse arrays
  no-unreachable: error # disallow unreachable statements after a return, throw, continue, or break statement
  use-isnan: warn # disallow comparisons with the value NaN
  valid-jsdoc: 'off' # Ensure JSDoc comments are valid (off by default)
  valid-typeof: warn # Ensure that the results of typeof are compared against a valid string

  # Best Practices
  # These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

  block-scoped-var: 'off' # treat var statements as if they were block scoped (off by default)
  complexity: 'off' # specify the maximum cyclomatic complexity allowed in a program (off by default)
  consistent-return: 'off' # require return statements to either always or never specify values
  curly: warn # specify curly brace conventions for all control statements
  default-case: 'off' # require default case in switch statements (off by default)
  dot-notation: warn # encourages use of dot notation whenever possible
  eqeqeq: [warn, 'allow-null'] # require the use of === and !==
  guard-for-in: 'off' # make sure for-in loops have an if statement (off by default)
  no-alert: warn # disallow the use of alert, confirm, and prompt
  no-caller: warn # disallow use of arguments.caller or arguments.callee
  no-div-regex: warn # disallow division operators explicitly at beginning of regular expression (off by default)
  no-else-return: 'off' # disallow else after a return in an if (off by default)
  no-eq-null: 'off' # disallow comparisons to null without a type-checking operator (off by default)
  no-eval: error # disallow use of eval()
  no-extend-native: warn # disallow adding to native types
  no-extra-bind: warn # disallow unnecessary function binding
  no-fallthrough: warn # disallow fallthrough of case statements
  no-floating-decimal: warn # disallow the use of leading or trailing decimal points in numeric literals (off by default)
  no-implied-eval: warn # disallow use of eval()-like methods
  no-labels: 'off' # disallow use of labeled statements
  no-unused-labels: 'off'
  no-iterator: warn # disallow usage of __iterator__ property
  no-lone-blocks: warn # disallow unnecessary nested blocks
  no-loop-func: 'off' # disallow creation of functions within loops
  no-multi-str: 'off' # disallow use of multiline strings
  no-native-reassign: 'off' # disallow reassignments of native objects
  no-new: warn # disallow use of new operator when not part of the assignment or comparison
  no-new-func: error # disallow use of new operator for Function object
  no-new-wrappers: warn # disallows creating new instances of String,Number, and Boolean
  no-octal: warn # disallow use of octal literals
  no-octal-escape: warn # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
  no-proto: warn # disallow usage of __proto__ property
  no-redeclare: 'off' # disallow declaring the same variable more then once
  no-return-assign: warn # disallow use of assignment in return statement
  no-script-url: warn # disallow use of javascript: urls.
  no-self-compare: warn # disallow comparisons where both sides are exactly the same (off by default)
  no-sequences: warn # disallow use of comma operator
  no-unused-expressions: 'off' # disallow usage of expressions in statement position
  no-useless-escape: warn # disallow escapes that don't have any effect in literals
  no-void: 'off' # disallow use of void operator (off by default)
  no-warning-comments: 'off' # disallow usage of configurable warning terms in comments": warn,                        # e.g. TODO or FIXME (off by default)
  no-with: warn # disallow use of the with statement
  radix: warn # require use of the second argument for parseInt() (off by default)
  semi-spacing: warn # require a space after a semi-colon
  vars-on-top: 'off' # requires to declare all vars on top of their containing scope (off by default)
  wrap-iife: 'off' # require immediate function invocation to be wrapped in parentheses (off by default)
  yoda: warn # require or disallow Yoda conditions

  # Variables
  # These rules have to do with variable declarations.

  no-catch-shadow: warn # disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
  no-delete-var: warn # disallow deletion of variables
  no-label-var: warn # disallow labels that share a name with a variable
  no-shadow: warn # disallow declaration of variables already declared in the outer scope
  no-shadow-restricted-names: warn # disallow shadowing of names such as arguments
  no-undef: error # disallow use of undeclared variables unless mentioned in a /*global */ block
  no-undefined: 'off' # disallow use of undefined variable (off by default)
  no-undef-init: warn # disallow use of undefined when initializing variables
  no-unused-vars:
    # disallow declaration of variables that are not used in the code
    - warn
    - vars: all
      args: none
      ignoreRestSiblings: true

  no-use-before-define: 'off' # disallow use of variables before they are defined

  # Node.js
  # These rules are specific to JavaScript running on Node.js.

  handle-callback-err: warn # enforces error handling in callbacks (off by default) (on by default in the node environment)
  no-mixed-requires: warn # disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
  no-new-require: warn # disallow use of new operator with the require function (off by default) (on by default in the node environment)
  no-path-concat: warn # disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
  no-process-exit: 'off' # disallow process.exit() (on by default in the node environment)
  no-restricted-modules: warn # restrict usage of specified node modules (off by default)
  no-sync: 'off' # disallow use of synchronous methods (off by default)

  # ESLint Comments Plugin
  # The following rules are made available via `eslint-plugin-eslint-comments`
  eslint-comments/no-aggregating-enable: warn # disallows eslint-enable comments for multiple eslint-disable comments
  eslint-comments/no-unlimited-disable: warn # disallows eslint-disable comments without rule names
  eslint-comments/no-unused-disable: warn # disallow disables that don't cover any errors
  eslint-comments/no-unused-enable: warn # # disallow enables that don't enable anything or enable rules that weren't disabled

  # Stylistic Issues
  # These rules are purely matters of style and are quite subjective.

  key-spacing: 'off'
  keyword-spacing: warn # enforce spacing before and after keywords
  jsx-quotes: [warn, 'prefer-double'] # enforces the usage of double quotes for all JSX attribute values which doesnâ€™t contain a double quote
  comma-spacing: 'off'
  no-multi-spaces: 'off'
  brace-style: 'off' # enforce one true brace style (off by default)
  camelcase: 'off' # require camel case names
  consistent-this: warn # enforces consistent naming when capturing the current execution context (off by default)
  eol-last: warn # enforce newline at the end of file, with no multiple empty lines
  func-names: 'off' # require function expressions to have a name (off by default)
  func-style: 'off' # enforces use of function declarations or expressions (off by default)
  new-cap: 'off' # require a capital letter for constructors
  new-parens: warn # disallow the omission of parentheses when invoking a constructor with no arguments
  no-nested-ternary: 'off' # disallow nested ternary expressions (off by default)
  no-array-constructor: warn # disallow use of the Array constructor
  no-empty-character-class: warn # disallow the use of empty character classes in regular expressions
  no-lonely-if: 'off' # disallow if as the only statement in an else block (off by default)
  no-new-object: warn # disallow use of the Object constructor
  no-spaced-func: warn # disallow space between function identifier and application
  no-ternary: 'off' # disallow the use of ternary operators (off by default)
  no-trailing-spaces: warn # disallow trailing whitespace at the end of lines
  no-underscore-dangle: 'off' # disallow dangling underscores in identifiers
  no-mixed-spaces-and-tabs: warn # disallow mixed spaces and tabs for indentation
  quotes: [warn, 'single', 'avoid-escape'] # specify whether double or single quotes should be used
  quote-props: 'off' # require quotes around object literal property names (off by default)
  semi: warn # require or disallow use of semicolons instead of ASI
  sort-vars: 'off' # sort variables within the same declaration block (off by default)
  space-in-brackets: 'off' # require or disallow spaces inside brackets (off by default)
  space-in-parens: 'off' # require or disallow spaces inside parentheses (off by default)
  space-infix-ops: warn # require spaces around operators
  space-unary-ops: [warn, { words: true, nonwords: false }] # require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
  max-nested-callbacks: 'off' # specify the maximum depth callbacks can be nested (off by default)
  one-var: 'off' # allow just one var statement per function (off by default)
  wrap-regex: 'off' # require regex literals to be wrapped in parentheses (off by default)

  # React Plugin
  # The following rules are made available via `eslint-plugin-react`.

  react/display-name: 'off'
  react/jsx-boolean-value: 'off'
  react/jsx-no-comment-textnodes: warn
  react/jsx-no-duplicate-props: error
  react/jsx-no-undef: error
  react/jsx-sort-props: 'off'
  react/jsx-uses-react: warn
  react/jsx-uses-vars: warn
  react/no-did-mount-set-state: warn
  react/no-did-update-set-state: warn
  react/no-multi-comp: 'off'
  react/no-string-refs: warn
  react/no-unknown-property: 'off'
  react/prop-types: 'off'
  # unnecessary due to the new JSX transform
  react/react-in-jsx-scope: 'off'
  react/self-closing-comp: warn
  react/wrap-multilines: 'off'

  # React-Hooks Plugin
  # The following rules are made available via `eslint-plugin-react-hooks`
  react-hooks/rules-of-hooks: error
  react-hooks/exhaustive-deps: error

  # Typescript Plugin
  '@typescript-eslint/no-explicit-any': 'warn'
