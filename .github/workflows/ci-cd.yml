name: CI/CD

on:
  push:
    branches:
      - nu
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.sha.outputs.short_sha }}
      go_version: ${{ steps.read.outputs.go_version }}
      msys2_packages: ${{ steps.read.outputs.msys2_packages }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate a shortened SHA for artifacts
        id: sha
        run: echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"
      - name: Read build settings from repository
        id: read
        run: |
          go_version=$(< .go-version)
          echo "Go version: ${go_version}"
          echo "::set-output name=go_version::${go_version}"
          msys2_packages=$(tr -s '\n' ' ' < msys2-packages.txt)
          echo "MSYS2 packages: ${msys2_packages}"
          echo "::set-output name=msys2_packages::${msys2_packages}"

  nebula:
    name: Nebula
    runs-on: ubuntu-20.04
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Go toolchain
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.setup.outputs.go_version }}

      - name: Cache Go dependencies
        uses: actions/cache@v2
        with:
          key: golang-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: golang-${{ runner.os }}-
          path: |
            ~/go/pkg
            ~/.cache/go-build

      - name: Cache Yarn dependencies
        uses: actions/cache@v2
        with:
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-
          path: |
            .pnp.*
            .yarn/
            !.yarn/releases
            !.yarn/plugins

      - name: Cache managed dependencies
        uses: actions/cache@v2
        with:
          key: third_party-${{ runner.os }}-${{ hashFiles('packages/build-tools/DEPS.yml') }}
          restore-keys: third_party-${{ runner.os }}-
          path: |
            packages/build-tools/DEPS.stamps
            third_party

      - name: Configure build
        run: ./task.sh configure build=Release

      - name: Fetch managed dependencies
        run: ./task.sh fetch-deps

      - name: Install build tools
        run: ./task.sh install-tools

      - name: Compile API definitions
        run: ./task.sh proto-build

      - name: Migrate database
        run: ./task.sh database-migrate

      - name: Build Nebula server
        run: ./task.sh server-build

      - name: Build Nebula frontend
        run: ./task.sh front-build

      - name: Upload server artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Nebula-server-${{ needs.setup.outputs.short_sha }}
          path: build/nebula

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Nebula-frontend-${{ needs.setup.outputs.short_sha }}
          path: packages/front/dist/prod

  knossos:
    name: Knossos / ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    needs: setup
    strategy:
      matrix:
        os: [Windows, macOS, Ubuntu]
        include:
          - os: Windows
            runner: windows-2019
            script: .\task.ps1
          - os: macOS
            runner: macos-10.15
            script: ./task.sh
          - os: Ubuntu
            runner: ubuntu-20.04
            script: ./task.sh
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Go toolchain
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.setup.outputs.go_version }}

      - name: Setup MSYS2 toolchain (Windows)
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          update: true
          install: ${{ needs.setup.outputs.msys2_packages }}

      - name: Locate MSYS2 installation (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          path=$(cygpath -w /)
          echo "MSYS2 is installed at ${path}"
          echo "extra_options=\"msys2_path=${path}\"" >> "$GITHUB_ENV"

      - name: Cache Go dependencies
        uses: actions/cache@v2
        with:
          key: golang-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: golang-${{ runner.os }}-
          path: |
            ~/go/pkg
            ~/.cache/go-build

      - name: Cache Yarn dependencies
        uses: actions/cache@v2
        with:
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-
          path: |
            .pnp.*
            .yarn/
            !.yarn/releases
            !.yarn/plugins

      - name: Cache managed dependencies
        uses: actions/cache@v2
        with:
          key: third_party-${{ runner.os }}-${{ hashFiles('packages/build-tools/DEPS.yml') }}
          restore-keys: third_party-${{ runner.os }}-
          path: |
            packages/build-tools/DEPS.stamps
            third_party

      - name: Configure build
        run: ${{ matrix.script }} configure build=Release ${{ env.extra_options }}

      - name: Fetch system dependencies (*nix)
        if: runner.os != 'Windows'
        run: |
          if [ "$RUNNER_OS" = 'macOS' ]; then
            brew install xz
          elif [ "$RUNNER_OS" = 'Linux' ]; then
            sudo apt-get install -y libgtk-3-dev liblzma-dev libzstd-dev zlib1g-dev
          fi

      - name: Fetch managed dependencies
        run: ${{ matrix.script }} fetch-deps

      - name: Install build tools
        run: ${{ matrix.script }} install-tools

      - name: Compile API definitions
        run: ${{ matrix.script }} proto-build

      - name: Build libarchive
        run: ${{ matrix.script }} libarchive-build

      - name: Build libknossos
        run: ${{ matrix.script }} libknossos-build

      - name: Build Knossos wrapper
        run: ${{ matrix.script }} client-build

      - name: Build Knossos UI
        run: ${{ matrix.script }} client-ui-build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Knossos-${{ matrix.os }}-${{ needs.setup.outputs.short_sha }}
          path: build/client/launcher/Release/
